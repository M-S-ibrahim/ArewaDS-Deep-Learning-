{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "04_pytorch_custom_datasets_exercises.ipynb",
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU",
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "ab88999f5b1144cdb44173f40495d9cb": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_fd10b490c70145c6bb5d1f1da08cfc3f",
              "IPY_MODEL_17c5345fc924481fb1e9d44a0c763bda",
              "IPY_MODEL_a5b223ef77084b4dbd995e5dc5036428"
            ],
            "layout": "IPY_MODEL_c17d3f70770647b2aee98fe4cabbc121"
          }
        },
        "fd10b490c70145c6bb5d1f1da08cfc3f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_4c5ca205dee5445b9a2fa54e30c25bd6",
            "placeholder": "​",
            "style": "IPY_MODEL_62f4cf93f5104e8ca88f18f432cc758a",
            "value": "100%"
          }
        },
        "17c5345fc924481fb1e9d44a0c763bda": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_9677da4b206a4b53b6a9a7c6961199f8",
            "max": 5,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_2b4cb565d68d44fdaeefae607b9c9785",
            "value": 5
          }
        },
        "a5b223ef77084b4dbd995e5dc5036428": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_71bd973f42ba4d3683384d312fa19df2",
            "placeholder": "​",
            "style": "IPY_MODEL_359de4ca59e2497196c2b23540daec09",
            "value": " 5/5 [00:12&lt;00:00,  2.47s/it]"
          }
        },
        "c17d3f70770647b2aee98fe4cabbc121": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "4c5ca205dee5445b9a2fa54e30c25bd6": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "62f4cf93f5104e8ca88f18f432cc758a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "9677da4b206a4b53b6a9a7c6961199f8": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "2b4cb565d68d44fdaeefae607b9c9785": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "71bd973f42ba4d3683384d312fa19df2": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "359de4ca59e2497196c2b23540daec09": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "0b36f2bd840643f3bd11b253c6d7984d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_c7719dc9011c447184d767fa09bd12c5",
              "IPY_MODEL_e1fb24d61e814feaba2820d3506d53b5",
              "IPY_MODEL_34d23704bc784458a606e3ea11bd65b0"
            ],
            "layout": "IPY_MODEL_ae7e173d23a14e6f82977f0e6f93ab64"
          }
        },
        "c7719dc9011c447184d767fa09bd12c5": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_df3d7b097ede4ba98507e62769582bcd",
            "placeholder": "​",
            "style": "IPY_MODEL_45d54a7ceca1484cad5624be5657e5ee",
            "value": "100%"
          }
        },
        "e1fb24d61e814feaba2820d3506d53b5": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_bd0fbeba887d4abda4fa38fcac5ea8e7",
            "max": 20,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_b6264721eae947b284c6c5eedf17097b",
            "value": 20
          }
        },
        "34d23704bc784458a606e3ea11bd65b0": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_165854ec681347078944785239571a97",
            "placeholder": "​",
            "style": "IPY_MODEL_6e37c0f8557f418e933bc0638e234bb4",
            "value": " 20/20 [00:48&lt;00:00,  2.43s/it]"
          }
        },
        "ae7e173d23a14e6f82977f0e6f93ab64": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "df3d7b097ede4ba98507e62769582bcd": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "45d54a7ceca1484cad5624be5657e5ee": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "bd0fbeba887d4abda4fa38fcac5ea8e7": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "b6264721eae947b284c6c5eedf17097b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "165854ec681347078944785239571a97": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "6e37c0f8557f418e933bc0638e234bb4": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "2e1bdbe571594d82aa71466dcd4f7fc7": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_3314ae99d7b8412187f4f00bf1b15f07",
              "IPY_MODEL_99d9682c6fa94950a46473511861c69c",
              "IPY_MODEL_f7bf2e728a7b4d4186d324737abe532d"
            ],
            "layout": "IPY_MODEL_b479467f8e2b49458880f48afc9c4aa4"
          }
        },
        "3314ae99d7b8412187f4f00bf1b15f07": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_ce7ae972554b4aebb3517664b22d7988",
            "placeholder": "​",
            "style": "IPY_MODEL_dcb7c0d97db84e068d0c1c76f453a658",
            "value": "100%"
          }
        },
        "99d9682c6fa94950a46473511861c69c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_50fc648c209e43f09903c55e51c16cad",
            "max": 50,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_b305699514e84592bd041b7cdf6c1b34",
            "value": 50
          }
        },
        "f7bf2e728a7b4d4186d324737abe532d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_c164becd3e9845179853b804c426a423",
            "placeholder": "​",
            "style": "IPY_MODEL_319dd6407e414a84ae38ac934b95dad6",
            "value": " 50/50 [01:58&lt;00:00,  2.37s/it]"
          }
        },
        "b479467f8e2b49458880f48afc9c4aa4": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "ce7ae972554b4aebb3517664b22d7988": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "dcb7c0d97db84e068d0c1c76f453a658": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "50fc648c209e43f09903c55e51c16cad": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "b305699514e84592bd041b7cdf6c1b34": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "c164becd3e9845179853b804c426a423": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "319dd6407e414a84ae38ac934b95dad6": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "fc4fe19a85c543a295474e6b2b75d6e0": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_d53f8cbddf4142bf80ce53d5c1a4a253",
              "IPY_MODEL_50b2400d4e2b4e4baae88f3f8682fe35",
              "IPY_MODEL_8a38e2d07ca14d82b6698e75c0c86b51"
            ],
            "layout": "IPY_MODEL_c3b9bd6000fe4581a1e46b721b62cb27"
          }
        },
        "d53f8cbddf4142bf80ce53d5c1a4a253": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_c971c291d2dd4f57907eab0c52eccefb",
            "placeholder": "​",
            "style": "IPY_MODEL_8647f335eea34e1f82b141f442082ff3",
            "value": "100%"
          }
        },
        "50b2400d4e2b4e4baae88f3f8682fe35": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_247f2e83cd264bb4a4ab66e236ed10d0",
            "max": 20,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_86fbe7e1e18749dc8f516024782ec0d9",
            "value": 20
          }
        },
        "8a38e2d07ca14d82b6698e75c0c86b51": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_ee236cfbcd7b4e68b717ac2967634c86",
            "placeholder": "​",
            "style": "IPY_MODEL_a360959600904929bd62a91c62e453b7",
            "value": " 20/20 [01:00&lt;00:00,  3.01s/it]"
          }
        },
        "c3b9bd6000fe4581a1e46b721b62cb27": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "c971c291d2dd4f57907eab0c52eccefb": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "8647f335eea34e1f82b141f442082ff3": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "247f2e83cd264bb4a4ab66e236ed10d0": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "86fbe7e1e18749dc8f516024782ec0d9": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "ee236cfbcd7b4e68b717ac2967634c86": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "a360959600904929bd62a91c62e453b7": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "cad7f97f6766418091a64be32a342996": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_239486c88ef849fea30e67cf4f0b7b28",
              "IPY_MODEL_87df2ef7166b43f7a2b0fcba194d4a5f",
              "IPY_MODEL_dda9d8d70fc0434a8e14362004496f47"
            ],
            "layout": "IPY_MODEL_0854c218dbf841a286609010dfa4c853"
          }
        },
        "239486c88ef849fea30e67cf4f0b7b28": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_a4dbcf5c03c649fba74a738500dd923f",
            "placeholder": "​",
            "style": "IPY_MODEL_c7a1f8667dad4e919f0be7a52dbab4db",
            "value": "100%"
          }
        },
        "87df2ef7166b43f7a2b0fcba194d4a5f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_8c98a2594e364d9598ef8f6cfa3202b5",
            "max": 20,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_029518b4d3e34d9aa4ede37988c7ecea",
            "value": 20
          }
        },
        "dda9d8d70fc0434a8e14362004496f47": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_e7308fbfa16f41839c803e3692ff8e09",
            "placeholder": "​",
            "style": "IPY_MODEL_aa66dba4c0ba410981d9d182a2f46253",
            "value": " 20/20 [02:01&lt;00:00,  5.99s/it]"
          }
        },
        "0854c218dbf841a286609010dfa4c853": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "a4dbcf5c03c649fba74a738500dd923f": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "c7a1f8667dad4e919f0be7a52dbab4db": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "8c98a2594e364d9598ef8f6cfa3202b5": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "029518b4d3e34d9aa4ede37988c7ecea": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "e7308fbfa16f41839c803e3692ff8e09": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "aa66dba4c0ba410981d9d182a2f46253": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        }
      }
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/M-S-ibrahim/ArewaDS-Deep-Learning-/blob/main/exercise\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 04. PyTorch Custom Datasets Exercises Template\n",
        "\n",
        "Welcome to the 04. PyTorch Custom Datasets exercise template.\n",
        "\n",
        "The best way to practice PyTorch code is to write more PyTorch code.\n",
        "\n",
        "So read the original notebook and try to complete the exercises by writing code where it's required.\n",
        "\n",
        "Feel free to reference the original resources whenever you need but should practice writing all of the code yourself.\n",
        "\n",
        "## Resources\n",
        "\n",
        "1. These exercises/solutions are based on [notebook 04 of the Learn PyTorch for Deep Learning course](https://www.learnpytorch.io/04_pytorch_custom_datasets/).\n",
        "2. See a live [walkthrough of the solutions (errors and all) on YouTube](https://youtu.be/vsFMF9wqWx0).\n",
        "3. See [other solutions on the course GitHub](https://github.com/mrdbourke/pytorch-deep-learning/tree/main/extras/solutions)."
      ],
      "metadata": {
        "id": "Vex99np2wFVt"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Check for GPU\n",
        "!nvidia-smi"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GaeYzOTLwWh2",
        "outputId": "e8ebe14f-5221-4f16-f515-a2aeea8b9ad6",
        "collapsed": true
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "/bin/bash: line 1: nvidia-smi: command not found\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Import torch\n",
        "import torch\n",
        "from torch import nn\n",
        "\n",
        "# Exercises require PyTorch > 1.10.0\n",
        "print(torch.__version__)\n",
        "\n",
        "# Setup device agnostic code\n",
        "device = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n",
        "device"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 53
        },
        "id": "DNwZLMbCzJLk",
        "outputId": "f6bd7a49-40b7-4c7a-b6c5-e15283e5c6ce"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2.6.0+cu124\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'cpu'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 1. Our models are underperforming (not fitting the data well). What are 3 methods for preventing underfitting? Write them down and explain each with a sentence."
      ],
      "metadata": {
        "id": "FSFX7tc1w-en"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### 1. Increase model complexity: Add more layers or neurons to the neural network to increase its capacity to learn complex patterns in the data.\n",
        "### 2. Train for longer:  Extend the training process to allow the model more time to learn the underlying patterns of the dataset.\n",
        "### 3. Add more features to the data: Introduce more relevant features to improve the model's ability to represent the data accurately.\n"
      ],
      "metadata": {
        "id": "-90Qvx9gtrLj"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 2. Recreate the data loading functions we built in [sections 1, 2, 3 and 4 of notebook 04](https://www.learnpytorch.io/04_pytorch_custom_datasets/). You should have train and test `DataLoader`'s ready to use."
      ],
      "metadata": {
        "id": "oBK-WI6YxDYa"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import requests\n",
        "import zipfile\n",
        "from pathlib import Path\n",
        "from torch.utils.data import DataLoader\n",
        "from torchvision import datasets, transforms\n",
        "import os\n",
        "\n",
        "# Setup path to data folder\n",
        "data_path = Path(\"data/\")\n",
        "image_path = data_path / \"pizza_steak_sushi\"\n",
        "\n",
        "# If the image folder doesn't exist, download it and prepare it...\n",
        "if image_path.is_dir():\n",
        "    print(f\"{image_path} directory exists.\")\n",
        "else:\n",
        "    print(f\"Did not find {image_path} directory, creating one...\")\n",
        "    image_path.mkdir(parents=True, exist_ok=True)\n",
        "    # Download pizza, steak, sushi data\n",
        "    with open(data_path / \"pizza_steak_sushi.zip\", \"wb\") as f:\n",
        "        request = requests.get(\"https://github.com/mrdbourke/pytorch-deep-learning/raw/main/data/pizza_steak_sushi.zip\")\n",
        "        print(\"Downloading pizza, steak, sushi data...\")\n",
        "        f.write(request.content)\n",
        "    # Unzip pizza, steak, sushi data\n",
        "    with zipfile.ZipFile(data_path / \"pizza_steak_sushi.zip\", \"r\") as zip_ref:\n",
        "        print(\"Unzipping pizza, steak, sushi data...\")\n",
        "        zip_ref.extractall(image_path)\n",
        "\n",
        "# Create simple transform\n",
        "data_transform = transforms.Compose([\n",
        "    transforms.Resize((64, 64)),\n",
        "    transforms.ToTensor(),\n",
        "])\n",
        "\n",
        "# Use ImageFolder to create dataset(s)\n",
        "train_data = datasets.ImageFolder(root=image_path / \"train\",\n",
        "                                  transform=data_transform,\n",
        "                                  target_transform=None)\n",
        "\n",
        "test_data = datasets.ImageFolder(root=image_path / \"test\",\n",
        "                                 transform=data_transform)\n",
        "\n",
        "# Get class names as a list\n",
        "class_names = train_data.classes\n",
        "\n",
        "# Turn images into DataLoaders\n",
        "BATCH_SIZE = 32\n",
        "train_dataloader = DataLoader(dataset=train_data,\n",
        "                              batch_size=BATCH_SIZE,\n",
        "                              shuffle=True)\n",
        "\n",
        "test_dataloader = DataLoader(dataset=test_data,\n",
        "                             batch_size=BATCH_SIZE,\n",
        "                             shuffle=False)\n",
        "\n",
        "# Check out dataloaders\n",
        "print(f\"Dataloaders: {train_dataloader, test_dataloader}\")\n",
        "print(f\"Class names: {class_names}\")"
      ],
      "metadata": {
        "id": "yL7C9fUJdxUU",
        "outputId": "e3b305bb-78ae-4d33-ea0e-4f2f553a28a0",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Did not find data/pizza_steak_sushi directory, creating one...\n",
            "Downloading pizza, steak, sushi data...\n",
            "Unzipping pizza, steak, sushi data...\n",
            "Dataloaders: (<torch.utils.data.dataloader.DataLoader object at 0x7f3cff699f50>, <torch.utils.data.dataloader.DataLoader object at 0x7f3cff40a610>)\n",
            "Class names: ['pizza', 'steak', 'sushi']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 2. Become one with the data\n",
        "import os\n",
        "def walk_through_dir(dir_path):\n",
        "  \"\"\"Walks through dir_path returning file counts of its contents.\"\"\"\n",
        "  for dirpath, dirnames, filenames in os.walk(dir_path):\n",
        "    print(f\"There are {len(dirnames)} directories and {len(filenames)} images in '{dirpath}'.\")"
      ],
      "metadata": {
        "id": "TYmhAX7J52VX"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Setup training and testing paths\n",
        "train_dir = image_path / \"train\"\n",
        "test_dir = image_path / \"test\""
      ],
      "metadata": {
        "id": "NfCDByvUfPm0"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Get a batch of images and labels from the training dataloader\n",
        "for images, labels in train_dataloader:\n",
        "    break\n",
        "\n",
        "# Choose an image index to visualize (e.g., the first image)\n",
        "image_index = 0\n",
        "\n",
        "# Get the image and its label\n",
        "image = images[image_index]\n",
        "label = labels[image_index]\n",
        "\n",
        "# Convert the image tensor to a NumPy array\n",
        "image_np = image.permute(1, 2, 0).numpy()  # Rearrange dimensions for matplotlib\n",
        "\n",
        "# Get the class name\n",
        "class_name = class_names[label]\n",
        "\n",
        "# Display the image with its class label\n",
        "plt.imshow(image_np)\n",
        "plt.title(f\"Class: {class_name}\")\n",
        "plt.axis(\"off\")  # Hide axis ticks and labels\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "pTjUAEsMfYkL",
        "outputId": "0a0f3f1d-44f3-43e0-956d-a52ac3cdb43b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 428
        }
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "We've got some images in our folders.\n",
        "\n",
        "Now we need to make them compatible with PyTorch by:\n",
        "1. Transform the data into tensors.\n",
        "2. Turn the tensor data into a `torch.utils.data.Dataset` and later a `torch.utils.data.DataLoader`."
      ],
      "metadata": {
        "id": "2AU4FGYC_KBz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 3.1 Transforming data with torchvision.transforms\n",
        "data_transform = transforms.Compose([\n",
        "    transforms.Resize((64, 64)), # Resize the images to 64x64 pixels\n",
        "    transforms.ToTensor(), # Convert the images to PyTorch tensors\n",
        "    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]) # Normalize the images\n",
        "])"
      ],
      "metadata": {
        "id": "KbGMaYGT-vwq"
      },
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Write a function to plot transformed images\n",
        "new_data_transform = transforms.Compose([\n",
        "    transforms.RandomResizedCrop(size=(224, 224)), # Randomly crop and resize the image\n",
        "    transforms.RandomHorizontalFlip(p=0.5),      # Randomly flip the image horizontally 50% of the time\n",
        "    transforms.ToTensor(),                       # Convert to tensor\n",
        "    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]) # Normalize\n",
        "])"
      ],
      "metadata": {
        "id": "vp8I2cpMAxcT"
      },
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Load image data using `ImageFolder`"
      ],
      "metadata": {
        "id": "FKgfqPArChVR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Create the datasets using the new transform\n",
        "train_data = datasets.ImageFolder(root=image_path / \"train\",\n",
        "                                  transform=new_data_transform,\n",
        "                                  target_transform=None)\n",
        "\n",
        "test_data = datasets.ImageFolder(root=image_path / \"test\",\n",
        "                                 transform=new_data_transform)\n"
      ],
      "metadata": {
        "id": "lZtfnfCugK4V"
      },
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Can also get class names as a dict\n",
        "class_dict = train_data.class_to_idx\n",
        "class_dict"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uCcWk7NDEay1",
        "outputId": "0c03654d-7750-4383-ff68-67bf351bbfb7"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'pizza': 0, 'steak': 1, 'sushi': 2}"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Check the lengths of each dataset\n",
        "len(train_data), len(test_data)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "W7H7bX4HEgie",
        "outputId": "0db70787-64b5-474e-ab2e-2f35f6a2f388"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(225, 75)"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Turn train and test Datasets into DataLoaders\n",
        "\n",
        "\n",
        "# The provided code already creates train_dataloader and test_dataloader.\n",
        "#  Just return them.\n",
        "print(train_dataloader)\n",
        "print(test_dataloader)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nskNr5YCEoRl",
        "outputId": "c58d904d-1583-4cf1-fc98-16f44eebc7a2"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<torch.utils.data.dataloader.DataLoader object at 0x7f3cff699f50>\n",
            "<torch.utils.data.dataloader.DataLoader object at 0x7f3cff40a610>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# How many batches of images are in our data loaders?\n",
        "print(f\"Number of batches in train_dataloader: {len(train_dataloader)}\")\n",
        "print(f\"Number of batches in test_dataloader: {len(test_dataloader)}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "z8vJxmxAFqw6",
        "outputId": "0957ee65-31e0-42e5-b512-d602fb05e577"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Number of batches in train_dataloader: 8\n",
            "Number of batches in test_dataloader: 3\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 3. Recreate `model_0` we built in section 7 of notebook 04."
      ],
      "metadata": {
        "id": "XeYFEqw8xK26"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import torch\n",
        "from torch import nn\n",
        "\n",
        "class TinyVGG(nn.Module):\n",
        "    \"\"\"\n",
        "    Model architecture copying TinyVGG from:\n",
        "    https://poloclub.github.io/cnn-explainer/\n",
        "    \"\"\"\n",
        "    def __init__(self, input_shape: int, hidden_units: int, output_shape: int) -> None:\n",
        "        super().__init__()\n",
        "        self.conv_block_1 = nn.Sequential(\n",
        "            nn.Conv2d(in_channels=input_shape,\n",
        "                      out_channels=hidden_units,\n",
        "                      kernel_size=3, # how big is the square that's going over the image?\n",
        "                      stride=1, # default\n",
        "                      padding=1), # options = \"valid\" (no padding) or \"same\" (output has same shape as input) or int for specific number\n",
        "            nn.ReLU(),\n",
        "            nn.Conv2d(in_channels=hidden_units,\n",
        "                      out_channels=hidden_units,\n",
        "                      kernel_size=3,\n",
        "                      stride=1,\n",
        "                      padding=1),\n",
        "            nn.ReLU(),\n",
        "            nn.MaxPool2d(kernel_size=2,\n",
        "                         stride=2) # default stride value is same as kernel_size\n",
        "        )\n",
        "        self.conv_block_2 = nn.Sequential(\n",
        "            nn.Conv2d(hidden_units, hidden_units, kernel_size=3, padding=1),\n",
        "            nn.ReLU(),\n",
        "            nn.Conv2d(hidden_units, hidden_units, kernel_size=3, padding=1),\n",
        "            nn.ReLU(),\n",
        "            nn.MaxPool2d(2)\n",
        "        )\n",
        "        self.classifier = nn.Sequential(\n",
        "            nn.Flatten(),\n",
        "            # Where did this in_features shape come from?\n",
        "            # It's because each layer of our network compresses and changes the shape of our input data.\n",
        "            nn.Linear(in_features=hidden_units*16*16,\n",
        "                      out_features=output_shape)\n",
        "        )\n",
        "    def forward(self, x: torch.Tensor):\n",
        "        x = self.conv_block_1(x)\n",
        "        # print(x.shape)\n",
        "        x = self.conv_block_2(x)\n",
        "        # print(x.shape)\n",
        "        x = self.classifier(x)\n",
        "        # print(x.shape)\n",
        "        return x\n",
        "\n",
        "model_0 = TinyVGG(input_shape=3, # number of color channels (3 for RGB)\n",
        "                  hidden_units=10,\n",
        "                  output_shape=len(train_data.classes)).to(device)\n",
        "model_0"
      ],
      "metadata": {
        "id": "CfoIxTGtrVyM",
        "outputId": "11fbb763-aced-4822-b814-b36d4c64f612",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "TinyVGG(\n",
              "  (conv_block_1): Sequential(\n",
              "    (0): Conv2d(3, 10, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
              "    (1): ReLU()\n",
              "    (2): Conv2d(10, 10, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
              "    (3): ReLU()\n",
              "    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n",
              "  )\n",
              "  (conv_block_2): Sequential(\n",
              "    (0): Conv2d(10, 10, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
              "    (1): ReLU()\n",
              "    (2): Conv2d(10, 10, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
              "    (3): ReLU()\n",
              "    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n",
              "  )\n",
              "  (classifier): Sequential(\n",
              "    (0): Flatten(start_dim=1, end_dim=-1)\n",
              "    (1): Linear(in_features=2560, out_features=3, bias=True)\n",
              "  )\n",
              ")"
            ]
          },
          "metadata": {},
          "execution_count": 44
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 4. Create training and testing functions for `model_0`."
      ],
      "metadata": {
        "id": "DKdEEFEqxM-8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def train_step(model: torch.nn.Module,\n",
        "               dataloader: torch.utils.data.DataLoader,\n",
        "               loss_fn: torch.nn.Module,\n",
        "               optimizer: torch.optim.Optimizer):\n",
        "    # Put the model in train mode\n",
        "    model.train()\n",
        "    # Setup train loss and train accuracy values\n",
        "    train_loss, train_acc = 0, 0\n",
        "    # Loop through data loader and data batches\n",
        "    for batch, (X, y) in enumerate(dataloader):\n",
        "        # Send data to target device\n",
        "        X, y = X.to(device), y.to(device)\n",
        "\n",
        "        # 1. Forward pass\n",
        "        y_pred = model(X)\n",
        "\n",
        "        # 2. Calculate and accumulate loss\n",
        "        loss = loss_fn(y_pred, y)\n",
        "        train_loss += loss.item()\n",
        "\n",
        "        # 3. Optimizer zero grad\n",
        "        optimizer.zero_grad()\n",
        "\n",
        "        # 4. Loss backward\n",
        "        loss.backward()\n",
        "\n",
        "        # 5. Optimizer step\n",
        "        optimizer.step()\n",
        "\n",
        "        # Calculate and accumualte accuracy metric across all batches\n",
        "        y_pred_class = torch.argmax(torch.softmax(y_pred, dim=1), dim=1)\n",
        "        train_acc += (y_pred_class == y).sum().item()/len(y_pred)\n",
        "\n",
        "    # Adjust metrics to get average loss and average accuracy per batch\n",
        "    train_loss = train_loss / len(dataloader)\n",
        "    train_acc = train_acc / len(dataloader)\n",
        "    return train_loss, train_acc"
      ],
      "metadata": {
        "id": "rnUox1qayDes"
      },
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def test_step(model: torch.nn.Module,\n",
        "              dataloader: torch.utils.data.DataLoader,\n",
        "              loss_fn: torch.nn.Module):\n",
        "    # Put model in eval mode\n",
        "    model.eval()\n",
        "    # Setup test loss and test accuracy values\n",
        "    test_loss, test_acc = 0, 0\n",
        "    # Turn on inference context manager\n",
        "    with torch.inference_mode():\n",
        "        # Loop through DataLoader batches\n",
        "        for batch, (X, y) in enumerate(dataloader):\n",
        "            # Send data to target device\n",
        "            X, y = X.to(device), y.to(device)\n",
        "            # 1. Forward pass\n",
        "            test_pred_logits = model(X)\n",
        "\n",
        "            # 2. Calculate and accumulate loss\n",
        "            loss = loss_fn(test_pred_logits, y)\n",
        "            test_loss += loss.item()\n",
        "\n",
        "            # Calculate and accumulate accuracy\n",
        "            test_pred_labels = test_pred_logits.argmax(dim=1)\n",
        "            test_acc += ((test_pred_labels == y).sum().item()/len(test_pred_labels))\n",
        "\n",
        "    # Adjust metrics to get average loss and accuracy per batch\n",
        "    test_loss = test_loss / len(dataloader)\n",
        "    test_acc = test_acc / len(dataloader)\n",
        "    return test_loss, test_acc\n"
      ],
      "metadata": {
        "id": "O7_EVPpHNKUP"
      },
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from tqdm.auto import tqdm\n",
        "\n",
        "def train(model: torch.nn.Module,\n",
        "          train_dataloader: torch.utils.data.DataLoader,\n",
        "          test_dataloader: torch.utils.data.DataLoader,\n",
        "          optimizer: torch.optim.Optimizer,\n",
        "          loss_fn: torch.nn.Module = nn.CrossEntropyLoss(),\n",
        "          epochs: int = 5):\n",
        "\n",
        "  # Create results dictionary\n",
        "  results = {\"train_loss\": [],\n",
        "             \"train_acc\": [],\n",
        "             \"test_loss\": [],\n",
        "             \"test_acc\": []}\n",
        "\n",
        "  # Loop through the training and testing steps for a number of epochs\n",
        "  for epoch in tqdm(range(epochs)):\n",
        "    # Train step\n",
        "    train_loss, train_acc = train_step(model=model,\n",
        "                                       dataloader=train_dataloader,\n",
        "                                       loss_fn=loss_fn,\n",
        "                                       optimizer=optimizer)\n",
        "    # Test step\n",
        "    test_loss, test_acc = test_step(model=model,\n",
        "                                    dataloader=test_dataloader,\n",
        "                                    loss_fn=loss_fn)\n",
        "\n",
        "    # Print out what's happening\n",
        "    print(f\"Epoch: {epoch+1} | \"\n",
        "          f\"train_loss: {train_loss:.4f} | \"\n",
        "          f\"train_acc: {train_acc:.4f} | \"\n",
        "          f\"test_loss: {test_loss:.4f} | \"\n",
        "          f\"test_acc: {test_acc:.4f}\"\n",
        "    )\n",
        "\n",
        "    # Update the results dictionary\n",
        "    results[\"train_loss\"].append(train_loss)\n",
        "    results[\"train_acc\"].append(train_acc)\n",
        "    results[\"test_loss\"].append(test_loss)\n",
        "    results[\"test_acc\"].append(test_acc)\n",
        "\n",
        "  # Return the results dictionary\n",
        "  return results"
      ],
      "metadata": {
        "id": "zXxTIh9tOh68"
      },
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 5. Try training the model you made in exercise 3 for 5, 20 and 50 epochs, what happens to the results?\n",
        "* Use `torch.optim.Adam()` with a learning rate of 0.001 as the optimizer."
      ],
      "metadata": {
        "id": "lvf-3pODxXYI"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Train for 5 epochs\n",
        "torch.manual_seed(42)\n",
        "torch.cuda.manual_seed(42)\n",
        "\n",
        "loss_fn = nn.CrossEntropyLoss()\n",
        "optimizer = torch.optim.Adam(model_0.parameters(),\n",
        "                             lr=0.001)\n",
        "\n",
        "\n",
        "\n",
        "# Train for 5 epochs\n",
        "epochs = 5\n",
        "results_5_epochs = train(model=model_0,\n",
        "                        train_dataloader=train_dataloader,\n",
        "                        test_dataloader=test_dataloader,\n",
        "                        optimizer=optimizer,\n",
        "                        loss_fn=loss_fn,\n",
        "                        epochs=epochs)"
      ],
      "metadata": {
        "id": "rV7s2qtIyDIZ",
        "outputId": "2ab11b84-487b-47d4-eb88-bf0437dc7729",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 136,
          "referenced_widgets": [
            "ab88999f5b1144cdb44173f40495d9cb",
            "fd10b490c70145c6bb5d1f1da08cfc3f",
            "17c5345fc924481fb1e9d44a0c763bda",
            "a5b223ef77084b4dbd995e5dc5036428",
            "c17d3f70770647b2aee98fe4cabbc121",
            "4c5ca205dee5445b9a2fa54e30c25bd6",
            "62f4cf93f5104e8ca88f18f432cc758a",
            "9677da4b206a4b53b6a9a7c6961199f8",
            "2b4cb565d68d44fdaeefae607b9c9785",
            "71bd973f42ba4d3683384d312fa19df2",
            "359de4ca59e2497196c2b23540daec09"
          ]
        }
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "  0%|          | 0/5 [00:00<?, ?it/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "ab88999f5b1144cdb44173f40495d9cb"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch: 1 | train_loss: 1.1071 | train_acc: 0.2500 | test_loss: 1.1061 | test_acc: 0.2604\n",
            "Epoch: 2 | train_loss: 1.0784 | train_acc: 0.4258 | test_loss: 1.1396 | test_acc: 0.2604\n",
            "Epoch: 3 | train_loss: 1.0804 | train_acc: 0.4258 | test_loss: 1.1698 | test_acc: 0.2604\n",
            "Epoch: 4 | train_loss: 1.1282 | train_acc: 0.3047 | test_loss: 1.1594 | test_acc: 0.2604\n",
            "Epoch: 5 | train_loss: 1.0889 | train_acc: 0.4258 | test_loss: 1.1443 | test_acc: 0.2604\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Train for 20 epochs\n",
        "torch.manual_seed(42)\n",
        "torch.cuda.manual_seed(42)\n",
        "\n",
        "loss_fn = nn.CrossEntropyLoss()\n",
        "optimizer = torch.optim.Adam(model_0.parameters(),\n",
        "                             lr=0.001)\n",
        "\n",
        "\n",
        "\n",
        "# Train for 20 epochs\n",
        "epochs = 20\n",
        "results_5_epochs = train(model=model_0,\n",
        "                        train_dataloader=train_dataloader,\n",
        "                        test_dataloader=test_dataloader,\n",
        "                        optimizer=optimizer,\n",
        "                        loss_fn=loss_fn,\n",
        "                        epochs=epochs)"
      ],
      "metadata": {
        "id": "UEtZzyF1QGTq",
        "outputId": "b5d52316-30f4-44a3-8408-63ac08987ac6",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 396,
          "referenced_widgets": [
            "0b36f2bd840643f3bd11b253c6d7984d",
            "c7719dc9011c447184d767fa09bd12c5",
            "e1fb24d61e814feaba2820d3506d53b5",
            "34d23704bc784458a606e3ea11bd65b0",
            "ae7e173d23a14e6f82977f0e6f93ab64",
            "df3d7b097ede4ba98507e62769582bcd",
            "45d54a7ceca1484cad5624be5657e5ee",
            "bd0fbeba887d4abda4fa38fcac5ea8e7",
            "b6264721eae947b284c6c5eedf17097b",
            "165854ec681347078944785239571a97",
            "6e37c0f8557f418e933bc0638e234bb4"
          ]
        }
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "  0%|          | 0/20 [00:00<?, ?it/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "0b36f2bd840643f3bd11b253c6d7984d"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch: 1 | train_loss: 1.1010 | train_acc: 0.3906 | test_loss: 1.1065 | test_acc: 0.2500\n",
            "Epoch: 2 | train_loss: 1.0811 | train_acc: 0.4258 | test_loss: 1.1171 | test_acc: 0.2604\n",
            "Epoch: 3 | train_loss: 1.0729 | train_acc: 0.4258 | test_loss: 1.1478 | test_acc: 0.2604\n",
            "Epoch: 4 | train_loss: 1.1201 | train_acc: 0.3047 | test_loss: 1.1369 | test_acc: 0.2604\n",
            "Epoch: 5 | train_loss: 1.0853 | train_acc: 0.3516 | test_loss: 1.1189 | test_acc: 0.2188\n",
            "Epoch: 6 | train_loss: 1.0797 | train_acc: 0.4180 | test_loss: 1.1244 | test_acc: 0.2917\n",
            "Epoch: 7 | train_loss: 0.9782 | train_acc: 0.6094 | test_loss: 1.0975 | test_acc: 0.3930\n",
            "Epoch: 8 | train_loss: 0.9391 | train_acc: 0.6406 | test_loss: 1.1249 | test_acc: 0.3523\n",
            "Epoch: 9 | train_loss: 0.9779 | train_acc: 0.4883 | test_loss: 1.1200 | test_acc: 0.4744\n",
            "Epoch: 10 | train_loss: 0.8727 | train_acc: 0.6250 | test_loss: 1.0243 | test_acc: 0.5047\n",
            "Epoch: 11 | train_loss: 0.8620 | train_acc: 0.5977 | test_loss: 1.0587 | test_acc: 0.3835\n",
            "Epoch: 12 | train_loss: 0.8778 | train_acc: 0.5352 | test_loss: 1.0743 | test_acc: 0.4848\n",
            "Epoch: 13 | train_loss: 0.7823 | train_acc: 0.7031 | test_loss: 1.0181 | test_acc: 0.5152\n",
            "Epoch: 14 | train_loss: 0.7549 | train_acc: 0.6211 | test_loss: 1.0601 | test_acc: 0.3826\n",
            "Epoch: 15 | train_loss: 1.0108 | train_acc: 0.5742 | test_loss: 1.1114 | test_acc: 0.4034\n",
            "Epoch: 16 | train_loss: 0.7314 | train_acc: 0.6406 | test_loss: 1.1201 | test_acc: 0.3428\n",
            "Epoch: 17 | train_loss: 0.7889 | train_acc: 0.6250 | test_loss: 1.0417 | test_acc: 0.4858\n",
            "Epoch: 18 | train_loss: 0.7145 | train_acc: 0.7148 | test_loss: 1.0505 | test_acc: 0.4858\n",
            "Epoch: 19 | train_loss: 0.6781 | train_acc: 0.7148 | test_loss: 1.0827 | test_acc: 0.4545\n",
            "Epoch: 20 | train_loss: 0.7590 | train_acc: 0.5742 | test_loss: 1.0992 | test_acc: 0.4545\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Train for 50 epochs\n",
        "torch.manual_seed(42)\n",
        "torch.cuda.manual_seed(42)\n",
        "\n",
        "loss_fn = nn.CrossEntropyLoss()\n",
        "optimizer = torch.optim.Adam(model_0.parameters(),\n",
        "                             lr=0.001)\n",
        "\n",
        "\n",
        "\n",
        "# Train for 50 epochs\n",
        "epochs = 50\n",
        "results_5_epochs = train(model=model_0,\n",
        "                        train_dataloader=train_dataloader,\n",
        "                        test_dataloader=test_dataloader,\n",
        "                        optimizer=optimizer,\n",
        "                        loss_fn=loss_fn,\n",
        "                        epochs=epochs)"
      ],
      "metadata": {
        "id": "Dwvg40qAQGP9",
        "outputId": "1dd0e937-b865-4b91-cf0b-27d6295bcbbd",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 917,
          "referenced_widgets": [
            "2e1bdbe571594d82aa71466dcd4f7fc7",
            "3314ae99d7b8412187f4f00bf1b15f07",
            "99d9682c6fa94950a46473511861c69c",
            "f7bf2e728a7b4d4186d324737abe532d",
            "b479467f8e2b49458880f48afc9c4aa4",
            "ce7ae972554b4aebb3517664b22d7988",
            "dcb7c0d97db84e068d0c1c76f453a658",
            "50fc648c209e43f09903c55e51c16cad",
            "b305699514e84592bd041b7cdf6c1b34",
            "c164becd3e9845179853b804c426a423",
            "319dd6407e414a84ae38ac934b95dad6"
          ]
        }
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "  0%|          | 0/50 [00:00<?, ?it/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "2e1bdbe571594d82aa71466dcd4f7fc7"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch: 1 | train_loss: 0.6991 | train_acc: 0.7148 | test_loss: 1.0778 | test_acc: 0.3939\n",
            "Epoch: 2 | train_loss: 0.7196 | train_acc: 0.5938 | test_loss: 1.0789 | test_acc: 0.4138\n",
            "Epoch: 3 | train_loss: 0.6348 | train_acc: 0.6914 | test_loss: 1.0845 | test_acc: 0.4337\n",
            "Epoch: 4 | train_loss: 0.7526 | train_acc: 0.6484 | test_loss: 1.1265 | test_acc: 0.4441\n",
            "Epoch: 5 | train_loss: 0.6307 | train_acc: 0.7578 | test_loss: 1.1098 | test_acc: 0.4555\n",
            "Epoch: 6 | train_loss: 0.7809 | train_acc: 0.5938 | test_loss: 1.1149 | test_acc: 0.3627\n",
            "Epoch: 7 | train_loss: 0.5473 | train_acc: 0.7812 | test_loss: 1.1629 | test_acc: 0.4650\n",
            "Epoch: 8 | train_loss: 0.6104 | train_acc: 0.7852 | test_loss: 1.1323 | test_acc: 0.4754\n",
            "Epoch: 9 | train_loss: 0.7581 | train_acc: 0.6445 | test_loss: 1.1401 | test_acc: 0.4044\n",
            "Epoch: 10 | train_loss: 0.5627 | train_acc: 0.8164 | test_loss: 1.1283 | test_acc: 0.4545\n",
            "Epoch: 11 | train_loss: 0.5604 | train_acc: 0.8203 | test_loss: 1.1492 | test_acc: 0.4138\n",
            "Epoch: 12 | train_loss: 0.4840 | train_acc: 0.8125 | test_loss: 1.2047 | test_acc: 0.4451\n",
            "Epoch: 13 | train_loss: 0.5159 | train_acc: 0.8203 | test_loss: 1.2588 | test_acc: 0.4242\n",
            "Epoch: 14 | train_loss: 0.4956 | train_acc: 0.7969 | test_loss: 1.2839 | test_acc: 0.4347\n",
            "Epoch: 15 | train_loss: 0.6426 | train_acc: 0.7188 | test_loss: 1.3123 | test_acc: 0.4242\n",
            "Epoch: 16 | train_loss: 0.5119 | train_acc: 0.7578 | test_loss: 1.2881 | test_acc: 0.4451\n",
            "Epoch: 17 | train_loss: 0.4820 | train_acc: 0.8359 | test_loss: 1.3161 | test_acc: 0.4451\n",
            "Epoch: 18 | train_loss: 0.4106 | train_acc: 0.8594 | test_loss: 1.3314 | test_acc: 0.4138\n",
            "Epoch: 19 | train_loss: 0.3936 | train_acc: 0.8711 | test_loss: 1.4268 | test_acc: 0.4242\n",
            "Epoch: 20 | train_loss: 0.6522 | train_acc: 0.7422 | test_loss: 1.4413 | test_acc: 0.4451\n",
            "Epoch: 21 | train_loss: 0.3752 | train_acc: 0.8711 | test_loss: 1.3651 | test_acc: 0.4754\n",
            "Epoch: 22 | train_loss: 0.4463 | train_acc: 0.8516 | test_loss: 1.3183 | test_acc: 0.4858\n",
            "Epoch: 23 | train_loss: 0.3574 | train_acc: 0.8477 | test_loss: 1.3636 | test_acc: 0.4545\n",
            "Epoch: 24 | train_loss: 0.3702 | train_acc: 0.9062 | test_loss: 1.3803 | test_acc: 0.4962\n",
            "Epoch: 25 | train_loss: 0.3376 | train_acc: 0.8789 | test_loss: 1.4197 | test_acc: 0.5066\n",
            "Epoch: 26 | train_loss: 0.3137 | train_acc: 0.8789 | test_loss: 1.5250 | test_acc: 0.4555\n",
            "Epoch: 27 | train_loss: 0.2689 | train_acc: 0.9180 | test_loss: 1.4992 | test_acc: 0.4555\n",
            "Epoch: 28 | train_loss: 0.2314 | train_acc: 0.9375 | test_loss: 1.5306 | test_acc: 0.4763\n",
            "Epoch: 29 | train_loss: 0.2574 | train_acc: 0.9375 | test_loss: 1.6014 | test_acc: 0.4867\n",
            "Epoch: 30 | train_loss: 0.2216 | train_acc: 0.9375 | test_loss: 1.7456 | test_acc: 0.4555\n",
            "Epoch: 31 | train_loss: 0.1898 | train_acc: 0.9414 | test_loss: 1.8110 | test_acc: 0.4555\n",
            "Epoch: 32 | train_loss: 0.1846 | train_acc: 0.9336 | test_loss: 1.7970 | test_acc: 0.4138\n",
            "Epoch: 33 | train_loss: 0.1524 | train_acc: 0.9453 | test_loss: 1.9015 | test_acc: 0.4347\n",
            "Epoch: 34 | train_loss: 0.1627 | train_acc: 0.9766 | test_loss: 2.1815 | test_acc: 0.3731\n",
            "Epoch: 35 | train_loss: 0.3163 | train_acc: 0.7930 | test_loss: 1.9017 | test_acc: 0.5350\n",
            "Epoch: 36 | train_loss: 0.8563 | train_acc: 0.6797 | test_loss: 1.9555 | test_acc: 0.4451\n",
            "Epoch: 37 | train_loss: 0.3725 | train_acc: 0.8242 | test_loss: 1.6823 | test_acc: 0.4754\n",
            "Epoch: 38 | train_loss: 0.2449 | train_acc: 0.9375 | test_loss: 1.6112 | test_acc: 0.4754\n",
            "Epoch: 39 | train_loss: 0.1974 | train_acc: 0.9531 | test_loss: 1.7357 | test_acc: 0.4858\n",
            "Epoch: 40 | train_loss: 0.1828 | train_acc: 0.9531 | test_loss: 1.8885 | test_acc: 0.4858\n",
            "Epoch: 41 | train_loss: 0.1158 | train_acc: 0.9688 | test_loss: 2.0603 | test_acc: 0.4242\n",
            "Epoch: 42 | train_loss: 0.1070 | train_acc: 0.9805 | test_loss: 2.1127 | test_acc: 0.4451\n",
            "Epoch: 43 | train_loss: 0.0889 | train_acc: 0.9805 | test_loss: 2.1613 | test_acc: 0.4858\n",
            "Epoch: 44 | train_loss: 0.0656 | train_acc: 0.9961 | test_loss: 2.3017 | test_acc: 0.4347\n",
            "Epoch: 45 | train_loss: 0.0564 | train_acc: 0.9922 | test_loss: 2.3544 | test_acc: 0.4754\n",
            "Epoch: 46 | train_loss: 0.0527 | train_acc: 1.0000 | test_loss: 2.4321 | test_acc: 0.4754\n",
            "Epoch: 47 | train_loss: 0.0415 | train_acc: 1.0000 | test_loss: 2.5512 | test_acc: 0.4650\n",
            "Epoch: 48 | train_loss: 0.0376 | train_acc: 1.0000 | test_loss: 2.6058 | test_acc: 0.4650\n",
            "Epoch: 49 | train_loss: 0.0313 | train_acc: 1.0000 | test_loss: 2.6595 | test_acc: 0.4650\n",
            "Epoch: 50 | train_loss: 0.0282 | train_acc: 1.0000 | test_loss: 2.7385 | test_acc: 0.4650\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "It looks like our model is starting to overfit towards the end (performing far better on the training data than on the testing data).\n",
        "\n",
        "In order to fix this, we'd have to introduce ways of preventing overfitting."
      ],
      "metadata": {
        "id": "fn8_fDGzQGMn"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 6. Double the number of hidden units in your model and train it for 20 epochs, what happens to the results?"
      ],
      "metadata": {
        "id": "qxZW-uAbxe_F"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Double the number of hidden units and train for 20 epochs\n",
        "torch.manual_seed(42)\n",
        "torch.cuda.manual_seed(42)\n",
        "\n",
        "model_double_hidden = TinyVGG(input_shape=3, hidden_units=20, output_shape=len(train_data.classes)).to(device)\n",
        "loss_fn = nn.CrossEntropyLoss()\n",
        "optimizer = torch.optim.Adam(model_double_hidden.parameters(), lr=0.001)\n",
        "epochs = 20\n",
        "results_double_hidden = train(model=model_double_hidden,\n",
        "                             train_dataloader=train_dataloader,\n",
        "                             test_dataloader=test_dataloader,\n",
        "                             optimizer=optimizer,\n",
        "                             loss_fn=loss_fn,\n",
        "                             epochs=epochs)\n"
      ],
      "metadata": {
        "id": "aW_KSHmxlnLw",
        "outputId": "12a0fba5-741d-4579-9bfc-00c72dc144b0",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 396,
          "referenced_widgets": [
            "fc4fe19a85c543a295474e6b2b75d6e0",
            "d53f8cbddf4142bf80ce53d5c1a4a253",
            "50b2400d4e2b4e4baae88f3f8682fe35",
            "8a38e2d07ca14d82b6698e75c0c86b51",
            "c3b9bd6000fe4581a1e46b721b62cb27",
            "c971c291d2dd4f57907eab0c52eccefb",
            "8647f335eea34e1f82b141f442082ff3",
            "247f2e83cd264bb4a4ab66e236ed10d0",
            "86fbe7e1e18749dc8f516024782ec0d9",
            "ee236cfbcd7b4e68b717ac2967634c86",
            "a360959600904929bd62a91c62e453b7"
          ]
        }
      },
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "  0%|          | 0/20 [00:00<?, ?it/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "fc4fe19a85c543a295474e6b2b75d6e0"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch: 1 | train_loss: 1.1074 | train_acc: 0.4180 | test_loss: 1.1061 | test_acc: 0.2604\n",
            "Epoch: 2 | train_loss: 1.1265 | train_acc: 0.3047 | test_loss: 1.1015 | test_acc: 0.2604\n",
            "Epoch: 3 | train_loss: 1.0950 | train_acc: 0.3125 | test_loss: 1.0967 | test_acc: 0.3845\n",
            "Epoch: 4 | train_loss: 1.0923 | train_acc: 0.4258 | test_loss: 1.0714 | test_acc: 0.6042\n",
            "Epoch: 5 | train_loss: 1.0520 | train_acc: 0.5625 | test_loss: 1.0339 | test_acc: 0.6184\n",
            "Epoch: 6 | train_loss: 0.9728 | train_acc: 0.5664 | test_loss: 1.1630 | test_acc: 0.3229\n",
            "Epoch: 7 | train_loss: 1.0308 | train_acc: 0.4648 | test_loss: 0.9140 | test_acc: 0.5530\n",
            "Epoch: 8 | train_loss: 0.9032 | train_acc: 0.6016 | test_loss: 1.0821 | test_acc: 0.3125\n",
            "Epoch: 9 | train_loss: 0.8843 | train_acc: 0.4805 | test_loss: 0.9903 | test_acc: 0.3636\n",
            "Epoch: 10 | train_loss: 0.9412 | train_acc: 0.5078 | test_loss: 0.9749 | test_acc: 0.4830\n",
            "Epoch: 11 | train_loss: 0.8772 | train_acc: 0.5820 | test_loss: 1.0138 | test_acc: 0.4044\n",
            "Epoch: 12 | train_loss: 0.9559 | train_acc: 0.4805 | test_loss: 0.9786 | test_acc: 0.4441\n",
            "Epoch: 13 | train_loss: 0.8808 | train_acc: 0.5039 | test_loss: 0.9212 | test_acc: 0.6155\n",
            "Epoch: 14 | train_loss: 0.9427 | train_acc: 0.5195 | test_loss: 0.9510 | test_acc: 0.5038\n",
            "Epoch: 15 | train_loss: 0.9906 | train_acc: 0.6094 | test_loss: 0.9232 | test_acc: 0.5445\n",
            "Epoch: 16 | train_loss: 0.7533 | train_acc: 0.6562 | test_loss: 1.0120 | test_acc: 0.4735\n",
            "Epoch: 17 | train_loss: 0.8068 | train_acc: 0.5820 | test_loss: 1.0248 | test_acc: 0.4545\n",
            "Epoch: 18 | train_loss: 0.7503 | train_acc: 0.6875 | test_loss: 1.0678 | test_acc: 0.4451\n",
            "Epoch: 19 | train_loss: 0.6824 | train_acc: 0.7070 | test_loss: 1.0092 | test_acc: 0.5350\n",
            "Epoch: 20 | train_loss: 0.6855 | train_acc: 0.7227 | test_loss: 1.2056 | test_acc: 0.3826\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "It looks like the model is still overfitting, even when changing the number of hidden units.\n",
        "\n",
        "To fix this, we'd have to look at ways to prevent overfitting with our model."
      ],
      "metadata": {
        "id": "THYGHbxyTfzM"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 7. Double the data you're using with your model from step 6 and train it for 20 epochs, what happens to the results?\n",
        "* **Note:** You can use the [custom data creation notebook](https://github.com/mrdbourke/pytorch-deep-learning/blob/main/extras/04_custom_data_creation.ipynb) to scale up your Food101 dataset.\n",
        "* You can also find the [already formatted double data (20% instead of 10% subset) dataset on GitHub](https://github.com/mrdbourke/pytorch-deep-learning/blob/main/data/pizza_steak_sushi_20_percent.zip), you will need to write download code like in exercise 2 to get it into this notebook."
      ],
      "metadata": {
        "id": "JAPDzW0wxhi3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Download 20% data for Pizza/Steak/Sushi from GitHub\n",
        "import requests\n",
        "import zipfile\n",
        "from pathlib import Path\n",
        "\n",
        "# Setup path to data folder\n",
        "data_path = Path(\"data/\")\n",
        "image_path = data_path / \"pizza_steak_sushi_20_percent\"\n",
        "\n",
        "# If the image folder doesn't exist, download it and prepare it...\n",
        "if image_path.is_dir():\n",
        "    print(f\"{image_path} directory exists.\")\n",
        "else:\n",
        "    print(f\"Did not find {image_path} directory, creating one...\")\n",
        "    image_path.mkdir(parents=True, exist_ok=True)\n",
        "\n",
        "# Download pizza, steak, sushi data\n",
        "with open(data_path / \"pizza_steak_sushi_20_percent.zip\", \"wb\") as f:\n",
        "    request = requests.get(\"https://github.com/mrdbourke/pytorch-deep-learning/raw/main/data/pizza_steak_sushi_20_percent.zip\")\n",
        "    print(\"Downloading pizza, steak, sushi 20% data...\")\n",
        "    f.write(request.content)\n",
        "\n",
        "# Unzip pizza, steak, sushi data\n",
        "with zipfile.ZipFile(data_path / \"pizza_steak_sushi_20_percent.zip\", \"r\") as zip_ref:\n",
        "    print(\"Unzipping pizza, steak, sushi 20% data...\")\n",
        "    zip_ref.extractall(image_path)"
      ],
      "metadata": {
        "id": "8tWfa7Y0yCkX",
        "outputId": "753350d5-04df-431e-f15e-af2c08914108",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "data/pizza_steak_sushi_20_percent directory exists.\n",
            "Downloading pizza, steak, sushi 20% data...\n",
            "Unzipping pizza, steak, sushi 20% data...\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# See how many images we have\n",
        "walk_through_dir(image_path"
      ],
      "metadata": {
        "id": "DrFK2ScnVg4q",
        "outputId": "368ea3f0-9bd2-48be-9245-a48c4f67d9f5",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "There are 2 directories and 0 images in 'data/pizza_steak_sushi_20_percent'.\n",
            "There are 3 directories and 0 images in 'data/pizza_steak_sushi_20_percent/train'.\n",
            "There are 0 directories and 154 images in 'data/pizza_steak_sushi_20_percent/train/pizza'.\n",
            "There are 0 directories and 146 images in 'data/pizza_steak_sushi_20_percent/train/steak'.\n",
            "There are 0 directories and 150 images in 'data/pizza_steak_sushi_20_percent/train/sushi'.\n",
            "There are 3 directories and 0 images in 'data/pizza_steak_sushi_20_percent/test'.\n",
            "There are 0 directories and 46 images in 'data/pizza_steak_sushi_20_percent/test/pizza'.\n",
            "There are 0 directories and 58 images in 'data/pizza_steak_sushi_20_percent/test/steak'.\n",
            "There are 0 directories and 46 images in 'data/pizza_steak_sushi_20_percent/test/sushi'.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Excellent, we now have double the training and testing images..."
      ],
      "metadata": {
        "id": "WhlWd-z-Vk22"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Create the train and test paths\n",
        "train_data_20_percent_path = image_path / \"train\"\n",
        "test_data_20_percent_path = image_path / \"test\"\n",
        "\n",
        "train_data_20_percent_path, test_data_20_percent_path"
      ],
      "metadata": {
        "id": "hNzXRfO1Tt1Q",
        "outputId": "b69d74ce-62c9-4568-9a08-c5aaba10638a",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(PosixPath('data/pizza_steak_sushi_20_percent/train'),\n",
              " PosixPath('data/pizza_steak_sushi_20_percent/test'))"
            ]
          },
          "metadata": {},
          "execution_count": 37
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Turn the 20 percent datapaths into Datasets and DataLoaders\n",
        "from torchvision.datasets import ImageFolder\n",
        "from torchvision import transforms\n",
        "from torch.utils.data import DataLoader\n",
        "\n",
        "simple_transform = transforms.Compose([\n",
        "  transforms.Resize((64, 64)),\n",
        "  transforms.ToTensor()\n",
        "])\n",
        "\n",
        "# Create datasets\n",
        "train_data_20_percent = datasets.ImageFolder(root=train_data_20_percent_path,\n",
        "                                            transform=simple_transform)\n",
        "\n",
        "test_data_20_percent = datasets.ImageFolder(root=test_data_20_percent_path,\n",
        "                                           transform=simple_transform)\n",
        "\n",
        "\n",
        "# Create dataloaders\n",
        "BATCH_SIZE = 32\n",
        "train_dataloader_20_percent = DataLoader(dataset=train_data_20_percent,\n",
        "                                        batch_size=BATCH_SIZE,\n",
        "                                        shuffle=True)\n",
        "test_dataloader_20_percent = DataLoader(dataset=test_data_20_percent,\n",
        "                                       batch_size=BATCH_SIZE,\n",
        "                                       shuffle=False)"
      ],
      "metadata": {
        "id": "R1_xU3FQUPkN"
      },
      "execution_count": 38,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Train a model with increased amount of data\n",
        "torch.manual_seed(42)\n",
        "torch.cuda.manual_seed(42)\n",
        "\n",
        "model_double_data = TinyVGG(input_shape=3, hidden_units=20, output_shape=len(train_data_20_percent.classes)).to(device)\n",
        "loss_fn = nn.CrossEntropyLoss()\n",
        "optimizer = torch.optim.Adam(model_double_data.parameters(), lr=0.001)\n",
        "epochs = 20\n",
        "results_double_data = train(model=model_double_data,\n",
        "                             train_dataloader=train_dataloader_20_percent,\n",
        "                             test_dataloader=test_dataloader_20_percent,\n",
        "                             optimizer=optimizer,\n",
        "                             loss_fn=loss_fn,\n",
        "                             epochs=epochs)"
      ],
      "metadata": {
        "id": "BuJ9YpRCVXRm",
        "outputId": "23efcc6e-3eaf-4f14-a49c-30f3bfc5cb65",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 396,
          "referenced_widgets": [
            "cad7f97f6766418091a64be32a342996",
            "239486c88ef849fea30e67cf4f0b7b28",
            "87df2ef7166b43f7a2b0fcba194d4a5f",
            "dda9d8d70fc0434a8e14362004496f47",
            "0854c218dbf841a286609010dfa4c853",
            "a4dbcf5c03c649fba74a738500dd923f",
            "c7a1f8667dad4e919f0be7a52dbab4db",
            "8c98a2594e364d9598ef8f6cfa3202b5",
            "029518b4d3e34d9aa4ede37988c7ecea",
            "e7308fbfa16f41839c803e3692ff8e09",
            "aa66dba4c0ba410981d9d182a2f46253"
          ]
        }
      },
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "  0%|          | 0/20 [00:00<?, ?it/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "cad7f97f6766418091a64be32a342996"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch: 1 | train_loss: 1.1042 | train_acc: 0.3312 | test_loss: 1.1005 | test_acc: 0.2875\n",
            "Epoch: 2 | train_loss: 1.0838 | train_acc: 0.3583 | test_loss: 1.0697 | test_acc: 0.3858\n",
            "Epoch: 3 | train_loss: 1.0273 | train_acc: 0.4500 | test_loss: 0.9528 | test_acc: 0.5722\n",
            "Epoch: 4 | train_loss: 0.9235 | train_acc: 0.5583 | test_loss: 0.9162 | test_acc: 0.5722\n",
            "Epoch: 5 | train_loss: 0.8648 | train_acc: 0.6521 | test_loss: 0.9192 | test_acc: 0.5455\n",
            "Epoch: 6 | train_loss: 0.8384 | train_acc: 0.6396 | test_loss: 1.0324 | test_acc: 0.4903\n",
            "Epoch: 7 | train_loss: 0.9034 | train_acc: 0.5708 | test_loss: 0.8969 | test_acc: 0.4932\n",
            "Epoch: 8 | train_loss: 0.7646 | train_acc: 0.6667 | test_loss: 0.9066 | test_acc: 0.5824\n",
            "Epoch: 9 | train_loss: 0.7828 | train_acc: 0.6542 | test_loss: 0.9520 | test_acc: 0.5239\n",
            "Epoch: 10 | train_loss: 0.8123 | train_acc: 0.6396 | test_loss: 0.9111 | test_acc: 0.5795\n",
            "Epoch: 11 | train_loss: 0.7513 | train_acc: 0.6667 | test_loss: 0.8614 | test_acc: 0.6284\n",
            "Epoch: 12 | train_loss: 0.6862 | train_acc: 0.7125 | test_loss: 0.9186 | test_acc: 0.5858\n",
            "Epoch: 13 | train_loss: 0.6687 | train_acc: 0.7146 | test_loss: 0.8807 | test_acc: 0.6034\n",
            "Epoch: 14 | train_loss: 0.6070 | train_acc: 0.7646 | test_loss: 1.1331 | test_acc: 0.5517\n",
            "Epoch: 15 | train_loss: 0.5943 | train_acc: 0.7729 | test_loss: 0.9481 | test_acc: 0.6102\n",
            "Epoch: 16 | train_loss: 0.5682 | train_acc: 0.7792 | test_loss: 1.0043 | test_acc: 0.5790\n",
            "Epoch: 17 | train_loss: 0.5361 | train_acc: 0.7333 | test_loss: 1.2841 | test_acc: 0.5585\n",
            "Epoch: 18 | train_loss: 0.4954 | train_acc: 0.7833 | test_loss: 1.0426 | test_acc: 0.5784\n",
            "Epoch: 19 | train_loss: 0.4926 | train_acc: 0.7958 | test_loss: 1.0361 | test_acc: 0.5614\n",
            "Epoch: 20 | train_loss: 0.3958 | train_acc: 0.8354 | test_loss: 1.1085 | test_acc: 0.6131\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 8. Make a prediction on your own custom image of pizza/steak/sushi (you could even download one from the internet) with your trained model from exercise 7 and share your prediction.\n",
        "* Does the model you trained in exercise 7 get it right?\n",
        "* If not, what do you think you could do to improve it?"
      ],
      "metadata": {
        "id": "bCCVfXk5xjYS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from io import BytesIO\n",
        "\n",
        "# Download an example image (replace with your own image URL)\n",
        "image_url = \"https://upload.wikimedia.org/wikipedia/commons/thumb/e/e9/Pizza-3004635.jpg/800px-Pizza-3004635.jpg\"\n",
        "response = requests.get(image_url)\n",
        "img = Image.open(BytesIO(response.content))\n",
        "\n",
        "# Transform the image\n",
        "img_transform = transforms.Compose([\n",
        "    transforms.Resize((64, 64)),\n",
        "    transforms.ToTensor(),\n",
        "])\n",
        "\n",
        "img_tensor = img_transform(img).unsqueeze(0).to(device)  # Add batch dimension and move to device\n",
        "\n",
        "# Make a prediction\n",
        "with torch.inference_mode():\n",
        "    model_double_data.eval()\n",
        "    pred_probs = torch.softmax(model_double_data(img_tensor), dim=1)\n",
        "    pred_label = torch.argmax(pred_probs, dim=1)\n",
        "    pred_class = class_names[pred_label.item()]\n",
        "\n",
        "print(f\"Predicted Class: {pred_class}\")\n",
        "\n"
      ],
      "metadata": {
        "id": "j4PhosrstARb"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}